{"version":3,"sources":["Titles.js","Form.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","props","onSubmit","loadWeather","type","name","placeholder","Weather","this","country","city","temperature","humidity","description","error","Api_Key","App","state","undefined","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","main","temp","sys","weather","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wRAWeA,E,iLARX,OACE,6BACE,wBAAIC,UAAU,0BAAd,oBACA,uBAAGA,UAAU,6BAAb,0D,GALaC,IAAMC,WCSZC,EATF,SAACC,GACZ,OACE,0BAAMC,SAAYD,EAAME,aACxB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCiCWC,E,iLAnCP,OACI,yBAAKV,UAAU,gBAEPW,KAAKP,MAAMQ,SAAWD,KAAKP,MAAMS,MAAQ,uBAAGb,UAAU,gBAAb,YACrC,0BAAMA,UAAU,kBAAhB,KAAoCW,KAAKP,MAAMS,KAA/C,KAAuDF,KAAKP,MAAMQ,UAKtED,KAAKP,MAAMU,aAAe,uBAAGd,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,KAAoCW,KAAKP,MAAMU,cAKnDH,KAAKP,MAAMW,UAAY,uBAAGf,UAAU,gBAAb,YACnB,0BAAMA,UAAU,kBAAhB,KAAoCW,KAAKP,MAAMW,WAKnDJ,KAAKP,MAAMY,aAAe,uBAAGhB,UAAU,gBAAb,cACtB,0BAAMA,UAAU,kBAAhB,KAAoCW,KAAKP,MAAMY,cAKnDL,KAAKP,MAAMa,OAAS,uBAAGjB,UAAU,kBAAkBW,KAAKP,MAAMa,Y,GA7B5DhB,IAAMC,WCGtBgB,G,KAAU,oCAyEDC,E,2MAtEXC,MAAQ,CACNN,iBAAaO,EACbR,UAAMQ,EACNT,aAASS,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTC,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DACLD,EAAEE,iBAEFZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAE9BhB,EAAUW,EAAEG,OAAOC,SAASf,QAAQgB,MAL/B,SAOYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DD,EAA7D,kBAA8EM,IAP/F,cAOLY,EAPK,gBAQYA,EAASC,OARrB,OAQLC,EARK,OAUXC,QAAQC,IAAIF,GAGTnB,GAAQD,EACX,EAAKuB,SAAS,CACZrB,YAAakB,EAASI,KAAKC,KAC3BxB,KAAMmB,EAASxB,KACfI,QAASoB,EAASM,IAAI1B,QACtBG,SAAUiB,EAASI,KAAKrB,SACxBC,YAAagB,EAASO,QAAQ,GAAGvB,YACjCC,MAAO,KAIT,EAAKkB,SAAS,CACZlB,MAAO,+BAzBE,4C,8HA+Bb,OACE,6BACL,yBAAKjB,UAAU,WACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMM,YAAaK,KAAKW,aACxB,kBAAC,EAAD,CACER,YAAaH,KAAKS,MAAMN,YACxBD,KAAMF,KAAKS,MAAMP,KACjBD,QAASD,KAAKS,MAAMR,QACpBG,SAAUJ,KAAKS,MAAML,SACrBC,YAAaL,KAAKS,MAAMJ,YACxBC,MAAON,KAAKS,MAAMH,kB,GA1DRhB,IAAMC,WCKpBsC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf6B,UAAUC,cAAcQ,YAI1BzB,QAAQC,IACN,iHAKEc,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBpB,QAAQC,IAAI,sCAGRc,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAA5C,GACLgB,QAAQhB,MAAM,4CAA6CA,MCxFjE6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,eAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,eAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCnB,MAAMkB,GACHK,MAAK,SAAApB,GAEJ,IAAMuC,EAAcvC,EAASwC,QAAQC,IAAI,gBAEnB,MAApBzC,EAAS0C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BV,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL5B,QAAQC,IACN,oEArFA6C,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCnB,QAAQC,IACN,iHAMJY,EAAgBC,EAAOC,OCrC/BE,I","file":"static/js/main.5df4e4d7.chunk.js","sourcesContent":["import React from 'react';\nclass Titles extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"title-container__title\">Weather Scanner </h1>\n        <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities...  </p>\n      </div>\n    )\n  }\n}\nexport default Titles;","import React from 'react';\nconst Form = (props) => {\n  return (\n    <form onSubmit = {props.loadWeather}>\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n    <button>Get Weather</button>\n  </form>\n  );\n}\nexport default Form;","\nimport React from 'react';\nclass Weather extends React.Component{\n    render(){\n        return(\n            <div className=\"weather-info\">\n                {\n                    this.props.country && this.props.city && <p className=\"weather__key\">Location: \n                        <span className=\"weather__value\">  {this.props.city}, {this.props.country}</span>                    \n                    </p> \n                }\n                \n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature: \n                        <span className=\"weather__value\">  {this.props.temperature}</span>\n                    </p>\n                }\n\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity: \n                        <span className=\"weather__value\">  {this.props.humidity}</span>\n                    </p>\n                }\n\n                {\n                    this.props.description && <p className=\"weather__key\">Conditions:  \n                        <span className=\"weather__value\">  {this.props.description}</span>\n                    </p>\n                }\n\n                {\n                    this.props.error && <p className=\"weather__error\">{this.props.error}</p>\n                }\n        \n            </div>\n        )\n    }\n}\n\nexport default Weather;\n","import React from 'react';\nimport Titles from './Titles';\nimport Form from './Form';\nimport Weather from './Weather';\nimport './App.css';\nconst Api_Key = 'e84aa460c857811e8ae17eed3a1293e0';\n\n  class App extends React.Component {\n    state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n  \n    getWeather = async (e) => {\n            e.preventDefault();\n\n      const city = e.target.elements.city.value;\n\n      const country = e.target.elements.country.value;\n\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);      \n      const response = await api_call.json();\n      \n      console.log(response);\n\n      \n      if(city && country){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    }\n    else {\n      this.setState({\n        error: \"Please enter the values...\"\n      })\n    } \n  }\n      \n   render() {\n    return (\n      <div>\n <div className=\"wrapper\">\n  <div className=\"main\">\n   <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-xs-5 title-container\">\n        <Titles />\n      </div>\n      <div className=\"col-xs-7 form-container\">\n        <Form loadWeather={this.getWeather} />\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n</div>\n    ) \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}